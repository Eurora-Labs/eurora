// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type Query = { text: string; assets: string[] }

export type ResponseChunk = { chunk: string }

const ARGS_MAP = { 'third_party':'{"initialize_openai_client":[],"save_api_key":["api_key"],"check_api_key_exists":[]}', 'window':'{"get_scale_factor":["height"],"resize_launcher_window":["height","scale_factor"]}', '':'{"send_query":["channel","query"]}' }
export type Router = { 'third_party': { check_api_key_exists: () => Promise<boolean>, 
save_api_key: (apiKey: string) => Promise<null>, 
initialize_openai_client: () => Promise<boolean> },
'window': { get_scale_factor: (height: number) => Promise<number>, 
resize_launcher_window: (height: number, scaleFactor: number) => Promise<null> },
'': { send_query: (channel: TAURI_CHANNEL<ResponseChunk>, query: Query) => Promise<string> } };


export type { InferCommandOutput }
export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
