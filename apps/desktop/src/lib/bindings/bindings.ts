// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type ContextChip = { id: string; extension_id: string; name: string; attrs: Partial<{ [key in string]: string }>; icon: string | null; position: number | null }

export type LoginToken = { code_challenge: string; expires_in: bigint; url: string }

export type Query = { text: string; assets: string[] }

export type ResponseChunk = { chunk: string }

const ARGS_MAP = { '':'{"send_query":["channel","query"]}', 'auth':'{"poll_for_login":[],"get_login_token":[]}', 'context_chip':'{"get":[]}', 'monitor':'{"capture_monitor":["monitor_name"]}', 'third_party':'{"save_api_key":["api_key"],"initialize_openai_client":[],"check_api_key_exists":[]}', 'window':'{"get_scale_factor":["height"],"resize_launcher_window":["height","scale_factor"]}' }
export type Router = { '': { send_query: (channel: TAURI_CHANNEL<ResponseChunk>, query: Query) => Promise<string> },
'auth': { get_login_token: () => Promise<LoginToken>, 
poll_for_login: () => Promise<boolean> },
'context_chip': { get: () => Promise<ContextChip[]> },
'monitor': { capture_monitor: (monitorName: string) => Promise<string> },
'third_party': { check_api_key_exists: () => Promise<boolean>, 
initialize_openai_client: () => Promise<boolean>, 
save_api_key: (apiKey: string) => Promise<null> },
'window': { get_scale_factor: (height: number) => Promise<number>, 
resize_launcher_window: (height: number, scaleFactor: number) => Promise<null> } };


export type { InferCommandOutput }
export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
