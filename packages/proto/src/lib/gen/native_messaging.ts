// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: native_messaging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ProtoImageFormat, protoImageFormatFromJSON, protoImageFormatToJSON } from "./shared.js";

export const protobufPackage = "native_messaging";

export enum ProtoNativeStateType {
  YOUTUBE_STATE = 0,
  ARTICLE_STATE = 1,
  PDF_STATE = 2,
  UNRECOGNIZED = -1,
}

export function protoNativeStateTypeFromJSON(object: any): ProtoNativeStateType {
  switch (object) {
    case 0:
    case "YOUTUBE_STATE":
      return ProtoNativeStateType.YOUTUBE_STATE;
    case 1:
    case "ARTICLE_STATE":
      return ProtoNativeStateType.ARTICLE_STATE;
    case 2:
    case "PDF_STATE":
      return ProtoNativeStateType.PDF_STATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProtoNativeStateType.UNRECOGNIZED;
  }
}

export function protoNativeStateTypeToJSON(object: ProtoNativeStateType): string {
  switch (object) {
    case ProtoNativeStateType.YOUTUBE_STATE:
      return "YOUTUBE_STATE";
    case ProtoNativeStateType.ARTICLE_STATE:
      return "ARTICLE_STATE";
    case ProtoNativeStateType.PDF_STATE:
      return "PDF_STATE";
    case ProtoNativeStateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ProtoNativeYoutubeState {
  type: string;
  url: string;
  title: string;
  transcript: string;
  currentTime: number;
  videoFrameBase64: string;
  videoFrameWidth: number;
  videoFrameHeight: number;
  videoFrameFormat: ProtoImageFormat;
}

function createBaseProtoNativeYoutubeState(): ProtoNativeYoutubeState {
  return {
    type: "",
    url: "",
    title: "",
    transcript: "",
    currentTime: 0,
    videoFrameBase64: "",
    videoFrameWidth: 0,
    videoFrameHeight: 0,
    videoFrameFormat: 0,
  };
}

export const ProtoNativeYoutubeState: MessageFns<ProtoNativeYoutubeState> = {
  encode(message: ProtoNativeYoutubeState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.transcript !== "") {
      writer.uint32(34).string(message.transcript);
    }
    if (message.currentTime !== 0) {
      writer.uint32(45).float(message.currentTime);
    }
    if (message.videoFrameBase64 !== "") {
      writer.uint32(50).string(message.videoFrameBase64);
    }
    if (message.videoFrameWidth !== 0) {
      writer.uint32(56).int32(message.videoFrameWidth);
    }
    if (message.videoFrameHeight !== 0) {
      writer.uint32(64).int32(message.videoFrameHeight);
    }
    if (message.videoFrameFormat !== 0) {
      writer.uint32(72).int32(message.videoFrameFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoNativeYoutubeState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoNativeYoutubeState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.transcript = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.currentTime = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.videoFrameBase64 = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.videoFrameWidth = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.videoFrameHeight = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.videoFrameFormat = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoNativeYoutubeState {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      currentTime: isSet(object.currentTime) ? globalThis.Number(object.currentTime) : 0,
      videoFrameBase64: isSet(object.videoFrameBase64) ? globalThis.String(object.videoFrameBase64) : "",
      videoFrameWidth: isSet(object.videoFrameWidth) ? globalThis.Number(object.videoFrameWidth) : 0,
      videoFrameHeight: isSet(object.videoFrameHeight) ? globalThis.Number(object.videoFrameHeight) : 0,
      videoFrameFormat: isSet(object.videoFrameFormat) ? protoImageFormatFromJSON(object.videoFrameFormat) : 0,
    };
  },

  toJSON(message: ProtoNativeYoutubeState): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.currentTime !== 0) {
      obj.currentTime = message.currentTime;
    }
    if (message.videoFrameBase64 !== "") {
      obj.videoFrameBase64 = message.videoFrameBase64;
    }
    if (message.videoFrameWidth !== 0) {
      obj.videoFrameWidth = Math.round(message.videoFrameWidth);
    }
    if (message.videoFrameHeight !== 0) {
      obj.videoFrameHeight = Math.round(message.videoFrameHeight);
    }
    if (message.videoFrameFormat !== 0) {
      obj.videoFrameFormat = protoImageFormatToJSON(message.videoFrameFormat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoNativeYoutubeState>, I>>(base?: I): ProtoNativeYoutubeState {
    return ProtoNativeYoutubeState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoNativeYoutubeState>, I>>(object: I): ProtoNativeYoutubeState {
    const message = createBaseProtoNativeYoutubeState();
    message.type = object.type ?? "";
    message.url = object.url ?? "";
    message.title = object.title ?? "";
    message.transcript = object.transcript ?? "";
    message.currentTime = object.currentTime ?? 0;
    message.videoFrameBase64 = object.videoFrameBase64 ?? "";
    message.videoFrameWidth = object.videoFrameWidth ?? 0;
    message.videoFrameHeight = object.videoFrameHeight ?? 0;
    message.videoFrameFormat = object.videoFrameFormat ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
