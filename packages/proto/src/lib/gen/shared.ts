// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: shared.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'shared';

export enum ProtoImageFormat {
	JPEG = 0,
	PNG = 1,
	WEBM = 2,
	RAW = 3,
	UNRECOGNIZED = -1
}

export function protoImageFormatFromJSON(object: any): ProtoImageFormat {
	switch (object) {
		case 0:
		case 'JPEG':
			return ProtoImageFormat.JPEG;
		case 1:
		case 'PNG':
			return ProtoImageFormat.PNG;
		case 2:
		case 'WEBM':
			return ProtoImageFormat.WEBM;
		case 3:
		case 'RAW':
			return ProtoImageFormat.RAW;
		case -1:
		case 'UNRECOGNIZED':
		default:
			return ProtoImageFormat.UNRECOGNIZED;
	}
}

export function protoImageFormatToJSON(object: ProtoImageFormat): string {
	switch (object) {
		case ProtoImageFormat.JPEG:
			return 'JPEG';
		case ProtoImageFormat.PNG:
			return 'PNG';
		case ProtoImageFormat.WEBM:
			return 'WEBM';
		case ProtoImageFormat.RAW:
			return 'RAW';
		case ProtoImageFormat.UNRECOGNIZED:
		default:
			return 'UNRECOGNIZED';
	}
}

export interface ProtoImage {
	data: Uint8Array;
	format: ProtoImageFormat;
	width: number;
	height: number;
}

function createBaseProtoImage(): ProtoImage {
	return { data: new Uint8Array(0), format: 0, width: 0, height: 0 };
}

export const ProtoImage: MessageFns<ProtoImage> = {
	encode(message: ProtoImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.data.length !== 0) {
			writer.uint32(10).bytes(message.data);
		}
		if (message.format !== 0) {
			writer.uint32(16).int32(message.format);
		}
		if (message.width !== 0) {
			writer.uint32(24).int32(message.width);
		}
		if (message.height !== 0) {
			writer.uint32(32).int32(message.height);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): ProtoImage {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseProtoImage();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break;
					}

					message.data = reader.bytes();
					continue;
				}
				case 2: {
					if (tag !== 16) {
						break;
					}

					message.format = reader.int32() as any;
					continue;
				}
				case 3: {
					if (tag !== 24) {
						break;
					}

					message.width = reader.int32();
					continue;
				}
				case 4: {
					if (tag !== 32) {
						break;
					}

					message.height = reader.int32();
					continue;
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): ProtoImage {
		return {
			data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
			format: isSet(object.format) ? protoImageFormatFromJSON(object.format) : 0,
			width: isSet(object.width) ? globalThis.Number(object.width) : 0,
			height: isSet(object.height) ? globalThis.Number(object.height) : 0
		};
	},

	toJSON(message: ProtoImage): unknown {
		const obj: any = {};
		if (message.data.length !== 0) {
			obj.data = base64FromBytes(message.data);
		}
		if (message.format !== 0) {
			obj.format = protoImageFormatToJSON(message.format);
		}
		if (message.width !== 0) {
			obj.width = Math.round(message.width);
		}
		if (message.height !== 0) {
			obj.height = Math.round(message.height);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<ProtoImage>, I>>(base?: I): ProtoImage {
		return ProtoImage.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<ProtoImage>, I>>(object: I): ProtoImage {
		const message = createBaseProtoImage();
		message.data = object.data ?? new Uint8Array(0);
		message.format = object.format ?? 0;
		message.width = object.width ?? 0;
		message.height = object.height ?? 0;
		return message;
	}
};

function bytesFromBase64(b64: string): Uint8Array {
	if ((globalThis as any).Buffer) {
		return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
	} else {
		const bin = globalThis.atob(b64);
		const arr = new Uint8Array(bin.length);
		for (let i = 0; i < bin.length; ++i) {
			arr[i] = bin.charCodeAt(i);
		}
		return arr;
	}
}

function base64FromBytes(arr: Uint8Array): string {
	if ((globalThis as any).Buffer) {
		return globalThis.Buffer.from(arr).toString('base64');
	} else {
		const bin: string[] = [];
		arr.forEach((byte) => {
			bin.push(globalThis.String.fromCharCode(byte));
		});
		return globalThis.btoa(bin.join(''));
	}
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
	? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}

export interface MessageFns<T> {
	encode(message: T, writer?: BinaryWriter): BinaryWriter;
	decode(input: BinaryReader | Uint8Array, length?: number): T;
	fromJSON(object: any): T;
	toJSON(message: T): unknown;
	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
